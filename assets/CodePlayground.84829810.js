import{Q as x}from"./QSelect.70047d12.js";import{X as p,Y as T,Z as n,q as l,ae as u,a7 as t,a6 as h,ad as g,bs as y,a9 as v,aa as b,a1 as C,$ as _,a5 as f,F as w,_ as S}from"./index.037f850d.js";import{Q as U}from"./QPage.a2da79f2.js";import{api as k}from"./axios.3e657e70.js";import{_ as N}from"./plugin-vue_export-helper.21dcd24c.js";import"./rtl.ad3ba425.js";import"./QItem.a6e550b6.js";import"./selection.b5503321.js";import"./format.8ac60962.js";import"./axios.9ab26c22.js";class q{async runSwiftCode(e,r){try{return(await k.post("/run",{code:e,testCases:r})).data}catch(i){throw console.error("Code Execution Error:",i),i}}async runSwiftXCTest(e,r){const i=`
    import XCTest
  
    class SolutionTest: XCTestCase {
      ${this.generateTestMethods(r)}
    }
  
    XCTMain([
      testCase(SolutionTest.allTests)
    ])
  
    // Original solution code
    ${e}
    `;return(await axios.post("/run-xctest",{code:i})).data}generateTestMethods(e){return e.map((r,i)=>`
      func test${i+1}() {
        XCTAssertEqual(solution(${r.input.join(",")}), ${r.expected})
      }
    `).join(`
`)}}var E=new q;const V="code-playground-data",X=`func addNumbers(_ a: Int, _ b: Int) -> Int {
    // Vi\u1EBFt code c\u1EE7a b\u1EA1n \u1EDF \u0111\xE2y
    return 0
}`,A=[{input:[1,2],expected:3,description:"Ki\u1EC3m tra v\u1EDBi s\u1ED1 d\u01B0\u01A1ng: 1 + 2"},{input:[-1,5],expected:4,description:"Ki\u1EC3m tra v\u1EDBi s\u1ED1 \xE2m: -1 + 5"},{input:[0,0],expected:0,description:"Ki\u1EC3m tra v\u1EDBi s\u1ED1 0: 0 + 0"}],I={name:"CodePlayground",data(){return{code:X,testCases:A,testType:"Basic",testTypeOptions:["Basic","XCTest"],assertTypeOptions:["XCTAssertEqual","XCTAssertTrue","XCTAssertFalse","XCTAssertNil","XCTAssertNotNil"],hasUnsavedChanges:!1,isRunning:!1,output:"",testResults:[]}},methods:{resetTestCases(){this.testType==="Basic"?this.testCases=[{input:[1,2],expected:3,description:"Basic test case"}]:this.testCases=[{assertType:"XCTAssertEqual",input:[1,2],expected:3,description:"Test addition"}],this.hasUnsavedChanges=!0},getExpectedLabel(s){switch(s){case"XCTAssertEqual":return"Expected Value";case"XCTAssertTrue":return"Expected (true/false)";case"XCTAssertFalse":return"Expected (true/false)";case"XCTAssertNil":return"Expected (nil)";case"XCTAssertNotNil":return"Expected (not nil)";default:return"Expected Result"}},getExpectedInputType(s){switch(s){case"XCTAssertTrue":case"XCTAssertFalse":return"text";case"XCTAssertNil":case"XCTAssertNotNil":return"text";default:return"text"}},addNewTestCase(){const s=this.testType==="Basic"?{input:[0,0],expected:0,description:"New test case"}:{assertType:"XCTAssertEqual",input:[0,0],expected:0,description:"New XCTest case"};this.testCases.push(s),this.hasUnsavedChanges=!0},async runTests(){this.isRunning=!0;try{const s=this.testType==="Basic"?E.runSwiftCode:E.runSwiftXCTest,{success:e,results:r,error:i}=await s(this.code,this.testCases);e?(this.testResults=r,this.output=this.$t("playground.tests_completed")):this.handleExecutionError(i)}catch(s){this.handleConnectionError(s)}finally{this.isRunning=!1}},handleCodeChange(s){this.code=s,this.hasUnsavedChanges=!0},handleTestCasesImport(s){const e=s.target.files[0],r=new FileReader;r.onload=i=>{const o=JSON.parse(i.target.result);this.testCases=o,this.hasUnsavedChanges=!0},r.readAsText(e)},saveToLocalStorage(){localStorage.setItem(V,JSON.stringify({code:this.code,testCases:this.testCases})),this.hasUnsavedChanges=!1},removeTestCase(s){this.testCases.splice(s,1),this.hasUnsavedChanges=!0},updateTestInput(s,e){this.testCases[s].input=e.split(",").map(Number),this.hasUnsavedChanges=!0},handleExecutionError(s){this.output=`Execution Error: ${s.message}`},handleConnectionError(s){this.output=`Connection Error: ${s.message}`},mounted(){const s=localStorage.getItem(V);if(s){const{code:e,testCases:r}=JSON.parse(s);this.code=e||X,this.testCases=r||A}}}},R={class:"row items-center q-gutter-sm"},O={class:"row q-gutter-sm"},B={class:"row items-center justify-between q-mb-sm"},F={class:"q-gutter-y-sm"},L={class:"row items-center justify-between q-mb-sm"},Q={class:"text-subtitle2"},j={class:"row q-col-gutter-md"},D={key:0,class:"col-12 col-sm-3"},K={class:"q-gutter-y-sm"},P={class:"row items-center"},M={class:"text-weight-medium"},z={class:"q-mt-sm text-caption"};function J(s,e,r,i,o,d){return p(),T(U,{padding:""},{default:n(()=>[l(g,{class:"playground-card q-mb-md",flat:"",bordered:""},{default:n(()=>[l(u,{class:"row items-center justify-between"},{default:n(()=>[e[5]||(e[5]=t("div",{class:"text-h6"},"Code Playground",-1)),t("div",R,[e[4]||(e[4]=t("span",null,"Test Type:",-1)),l(x,{modelValue:o.testType,"onUpdate:modelValue":[e[0]||(e[0]=a=>o.testType=a),d.resetTestCases],options:o.testTypeOptions,dense:"","options-dense":"",style:{width:"150px"}},null,8,["modelValue","options","onUpdate:modelValue"])]),t("div",O,[l(h,{color:"secondary",icon:"upload_file",label:"Import Test Cases",onClick:e[1]||(e[1]=a=>s.importTestCasesRef.click())}),l(h,{color:o.hasUnsavedChanges?"warning":"positive",icon:o.hasUnsavedChanges?"save":"check_circle",label:o.hasUnsavedChanges?"Save Changes":"Saved",onClick:d.saveToLocalStorage},null,8,["color","icon","label","onClick"])])]),_:1}),l(u,null,{default:n(()=>[l(g,{flat:"",bordered:"",class:"bg-grey-2"},{default:n(()=>[l(u,null,{default:n(()=>e[6]||(e[6]=[t("div",{class:"text-weight-bold q-mb-sm"},"\u0110\u1EC1 b\xE0i:",-1),t("div",null,"Vi\u1EBFt m\u1ED9t h\xE0m nh\u1EADn v\xE0o hai s\u1ED1 nguy\xEAn v\xE0 tr\u1EA3 v\u1EC1 t\u1ED5ng c\u1EE7a ch\xFAng.",-1)])),_:1})]),_:1})]),_:1}),l(u,null,{default:n(()=>[l(y,{modelValue:o.code,"onUpdate:modelValue":[e[2]||(e[2]=a=>o.code=a),d.handleCodeChange],type:"textarea",filled:"",class:"code-editor",rows:10,"input-style":{fontFamily:"monospace",fontSize:"14px",backgroundColor:"#1e1e1e",color:"#d4d4d4"}},null,8,["modelValue","onUpdate:modelValue"])]),_:1}),l(u,null,{default:n(()=>[t("div",B,[e[7]||(e[7]=t("div",{class:"text-weight-bold"},"Test Cases:",-1)),l(h,{flat:"",dense:"",color:"primary",icon:"add",label:"Add Test Case",onClick:d.addNewTestCase},null,8,["onClick"])]),t("div",F,[(p(!0),v(w,null,b(o.testCases,(a,m)=>(p(),T(g,{key:m,flat:"",bordered:""},{default:n(()=>[l(u,null,{default:n(()=>[t("div",L,[t("div",Q,"Test Case #"+C(m+1),1),l(h,{flat:"",dense:"",color:"negative",icon:"delete",onClick:c=>d.removeTestCase(m)},null,8,["onClick"])]),t("div",j,[o.testType==="XCTest"?(p(),v("div",D,[l(x,{modelValue:a.assertType,"onUpdate:modelValue":c=>a.assertType=c,options:o.assertTypeOptions,label:"Assert Type",dense:"","options-dense":""},null,8,["modelValue","onUpdate:modelValue","options"])])):_("",!0),t("div",{class:f(["col-12",o.testType==="XCTest"?"col-sm-3":"col-sm-4"])},[l(y,{modelValue:a.description,"onUpdate:modelValue":c=>a.description=c,label:"Description",dense:""},null,8,["modelValue","onUpdate:modelValue"])],2),t("div",{class:f(["col-12",o.testType==="XCTest"?"col-sm-3":"col-sm-4"])},[l(y,{modelValue:a.input,"onUpdate:modelValue":[c=>a.input=c,c=>d.updateTestInput(m,c)],label:"Input (comma separated)",dense:""},null,8,["modelValue","onUpdate:modelValue"])],2),t("div",{class:f(["col-12",o.testType==="XCTest"?"col-sm-3":"col-sm-4"])},[l(y,{modelValue:a.expected,"onUpdate:modelValue":c=>a.expected=c,label:d.getExpectedLabel(a.assertType),type:d.getExpectedInputType(a.assertType),dense:""},null,8,["modelValue","onUpdate:modelValue","label","type"])],2)])]),_:2},1024)]),_:2},1024))),128))])]),_:1}),l(u,null,{default:n(()=>[l(h,{color:"primary",icon:"play_arrow",label:"Ch\u1EA1y Tests",loading:o.isRunning,onClick:d.runTests},null,8,["loading","onClick"])]),_:1}),o.output?(p(),T(u,{key:0},{default:n(()=>[l(g,{flat:"",bordered:"",class:"bg-grey-2"},{default:n(()=>[l(u,null,{default:n(()=>[e[8]||(e[8]=t("div",{class:"text-weight-bold q-mb-sm"},"Output:",-1)),t("pre",null,C(o.output),1)]),_:1})]),_:1})]),_:1})):_("",!0),o.testResults.length?(p(),T(u,{key:1},{default:n(()=>[e[9]||(e[9]=t("div",{class:"text-weight-bold q-mb-sm"},"K\u1EBFt qu\u1EA3 tests:",-1)),t("div",K,[(p(!0),v(w,null,b(o.testResults,(a,m)=>(p(),T(g,{key:m,flat:"",bordered:"",class:f(a.passed?"bg-green-1":"bg-red-1")},{default:n(()=>[l(u,null,{default:n(()=>[t("div",P,[l(S,{name:a.passed?"check_circle":"error",color:a.passed?"positive":"negative",size:"sm",class:"q-mr-sm"},null,8,["name","color"]),t("span",M,C(a.description),1)]),t("div",z,[t("div",null,"Input: ["+C(a.input.join(", "))+"]",1),t("div",null,"Expected: "+C(a.expected),1),t("div",null,"Actual: "+C(a.actual),1)])]),_:2},1024)]),_:2},1032,["class"]))),128))])]),_:1})):_("",!0)]),_:1}),t("input",{ref:"importTestCasesRef",type:"file",accept:".json",style:{display:"none"},onChange:e[3]||(e[3]=(...a)=>d.handleTestCasesImport&&d.handleTestCasesImport(...a))},null,544)]),_:1})}var le=N(I,[["render",J],["__scopeId","data-v-0934480e"]]);export{le as default};
